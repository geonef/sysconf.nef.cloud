# NEF SERVICE 'host'               -*- shell-script -*-

NEF_SERVICE_NUMBER=1
NEF_SERVICE_IS_LXC=0

#NEF_SERVICE_SYSCONF_NAME=nef.service.host

######################################################################
# hooks

NEF_SERVICE_UPDATE()
{
    nef_service_common_update
    _nef_service_host_update_network
    _nef_service_host_update_containers
}

NEF_SERVICE_UNINSTALL()
{
    _nef_service_host_uninstall_network
    _nef_service_host_destroy_containers
}

NEF_SERVICE_UPDATE_APPS()
{
    _nef_service_host_ssh_each nef-cloud update apps
}

######################################################################
# utils

_nef_service_host_lxc_path()
{
    echo /lxc/$(nef_info_service_hostname)
}
_nef_foreach_lxc()
{
    nef_foreach_service --all _nef_foreach_lxc_one "$@"
}
_nef_foreach_lxc_one()
{
    if test "$NEF_SERVICE_IS_LXC" -eq 1; then
        "$@"
    fi
}
_nef_service_host_ssh_each()
{
    _nef_foreach_lxc _nef_service_host_ssh_each_one "$@"
}
_nef_service_host_ssh_each_one()
{
    nef_cloud_log "ssh -A `nef_info_service_hostname` \"$*\""
    ssh -A `nef_info_service_hostname` "$*"
}

######################################################################
# main functions


_nef_service_host_update_network()
{
    nef_service_common_update
    nef_cloud_log "Configuring network"
    interfacesFile=/etc/network/interfaces.d/generated.`nef_info_service_hostname`.interfaces
    bridgeName=nc${NEF_CLOUD_NUMBER}x-${NEF_CLOUD_NODE_NUMBER}
    _interfacesAllowName=nef-cloud-${NEF_CLOUD}-${NEF_CLOUD_NODE}
    echo "# GENERATED BY nef-cloud" >$interfacesFile

    for interface in ${NEF_CLOUD_NODE_INTERFACES[@]}; do
        nameK=NEF_CLOUD_NODE_INTERFACES_${interface}_INTERFACE
        ipK=NEF_CLOUD_NODE_INTERFACES_${interface}_IP
        name=${!nameK}
        ip=${!ipK}
        cat <<EOF >>$interfacesFile

auto ${name}
allow-$_interfacesAllowName ${name}
iface ${name} inet static
    address ${ip}/32
EOF
    done

    cat <<EOF >>$interfacesFile

# Bridge for cloud "$NEF_CLOUD" [$NEF_CLOUD_NUMBER], node "$NEF_CLOUD_NODE" [$NEF_CLOUD_NODE_NUMBER]
#
auto ${bridgeName}
allow-$_interfacesAllowName ${bridgeName}
iface ${bridgeName} inet static
    address `nef_info_service_ip`/$NEF_CLOUD_BRIDGE_NETMASK
    pre-up brctl addbr ${bridgeName}
    post-down brctl delbr ${bridgeName}
EOF

    # key=NEF_CLOUD_NODE_TCP_FORWARDS
    for forward in ${NEF_CLOUD_NODE_TCP_FORWARDS[@]}; do
        sourcePortK=NEF_CLOUD_NODE_TCP_FORWARDS_${forward}_SOURCE_PORT
        sourceIFK=NEF_CLOUD_NODE_TCP_FORWARDS_${forward}_SOURCE_INTERFACE
        destIPK=NEF_CLOUD_NODE_TCP_FORWARDS_${forward}_DEST_IP
        targetServiceK=NEF_CLOUD_NODE_TCP_FORWARDS_${forward}_TARGET_SERVICE
        targetPortK=NEF_CLOUD_NODE_TCP_FORWARDS_${forward}_TARGET_PORT
        targetServiceIP=$(nef_info_service_ip ${!targetServiceK})
        sourceIF=${!sourceIFK}
        destIP=${!destIPK}
        # [ "$sourceIF" = "" ] && sourceIF=$NEF_CLOUD_NODE_PUBLIC_INTERFACE

        spec=""
        [ "$sourceIF" = "" ] || spec="$spec -i $sourceIF"
        [ "$destIP" = "" ] || spec="$spec --dst $destIP "
        # spec="-i $sourceIF -p tcp --dport ${!sourcePortK} -j DNAT --to ${targetServiceIP}:${!targetPortK}"
        spec="$spec -p tcp --dport ${!sourcePortK} -j DNAT --to ${targetServiceIP}:${!targetPortK}"
        cat <<EOF >>$interfacesFile
    post-up iptables -t nat -A PREROUTING $spec
    pre-down iptables -t nat -D PREROUTING $spec
EOF
    done

    _NEF_CLOUD_SELF_NODE=$NEF_CLOUD_NODE
    _NEF_CLOUD_SELF_NODE_NUMBER=$NEF_CLOUD_NODE_NUMBER
    _NEF_CLOUD_SELF_NODE_PUBLIC_IP=$NEF_CLOUD_NODE_PUBLIC_IP

    nef_foreach_node --all _nef_service_host_generate_node_tunnel >>$interfacesFile

    ifup --allow=$_interfacesAllowName --all
}

_nef_service_host_generate_node_tunnel()
{
    if test "$_NEF_CLOUD_SELF_NODE" != "$NEF_CLOUD_NODE"; then
        tunnelName=nc${NEF_CLOUD_NUMBER}t-${_NEF_CLOUD_SELF_NODE_NUMBER}-${NEF_CLOUD_NODE_NUMBER}
        if test $_NEF_CLOUD_SELF_NODE_NUMBER -lt $NEF_CLOUD_NODE_NUMBER; then
            numberA=$_NEF_CLOUD_SELF_NODE_NUMBER
            numberB=$NEF_CLOUD_NODE_NUMBER
            sideNumber=0
        else
            numberA=$NEF_CLOUD_NODE_NUMBER
            numberB=$_NEF_CLOUD_SELF_NODE_NUMBER
            sideNumber=1
        fi

        # format: 00001010.TTCCCC01.AAAAAAAB.BBBBBBNN /30
        declare -i dIP=$((
                10 << 24
                | 1 << 22
                | $NEF_CLOUD_NUMBER << 18
                | 1 << 16
                | $numberA << 9
                | $numberB << 2
                | $sideNumber
                ))

        tunnelIP=$(nef_format_ip --dotted $dIP)
        targetNetwork=$(nef_info_node_bridge_network --with-prefix)

        cat <<EOF

# Bridge for cloud "$NEF_CLOUD" [$NEF_CLOUD_NUMBER], node "$_NEF_CLOUD_SELF_NODE" [$_NEF_CLOUD_SELF_NODE_NUMBER] to node "$NEF_CLOUD_NODE" [$NEF_CLOUD_NODE_NUMBER]
#
auto ${tunnelName}
allow-$_interfacesAllowName ${tunnelName}
iface ${tunnelName} inet static
    address ${tunnelIP}/30
    pre-up ip tunnel add ${tunnelName} mode gre local ${_NEF_CLOUD_SELF_NODE_PUBLIC_IP} remote ${NEF_CLOUD_NODE_PUBLIC_IP} ttl 255
    up ip link set mtu 1500 dev ${tunnelName}
    up ip ro add ${targetNetwork} dev ${tunnelName}
    post-down ip tunnel del ${tunnelName}
EOF

    fi
}

_nef_service_host_uninstall_network()
{
    for file in \
        /etc/hosts.d/generated.`nef_info_service_hostname`.hosts \
        /etc/network/interfaces.d/generated.`nef_info_service_hostname`.interfaces; do

        nef_cloud_log "removing file: $file"
        rm -f $file
    done
}

_nef_service_host_update_containers()
{
    nef_cloud_log "CHECKING FOR CONTAINERS TO CREATE"
    _nef_foreach_lxc _nef_service_host_update_containers_one
}

_nef_service_host_update_containers_one()
{
    name=$(nef_info_service_hostname)
    if lxc-ls | grep -q $name; then
        nef_cloud_log "++ IN SSH LXC '$name'"
        nef_cloud_log "in-SSH command: nef-cloud update services"
        ssh `nef_info_service_hostname` "nef-cloud update services" ||  nef_fatal "SSH subcommand failed"
        nef_cloud_log "-- OUT SSH LXC '$name'"
    else
        _nef_service_host_update_containers_one_install $name
    fi
}

_nef_service_host_update_containers_one_install()
{
    name=$1
    nef_cloud_log "Installing missing container: $name"
    lxcpath=$(_nef_service_host_lxc_path)

    _nef_service_host_destroy_lxc_rootfs

    if test "$NEF_CLOUD_NODE_LVM_GROUP" != ""; then

        nef_cloud_log "LVM group is $NEF_CLOUD_NODE_LVM_GROUP"
        grep -q $lxcpath /etc/fstab && nef_fatal "$lxcpath exists in /etc/fstab"

        _size=$NEF_SERVICE_FS_SIZE
        echo NEF_SERVICE_FS_SIZE $NEF_SERVICE_FS_SIZE
        [ "$_size" = "" ] && _size=3G
        _device=/dev/$NEF_CLOUD_NODE_LVM_GROUP/$name

        lvcreate -L $_size -n $name $NEF_CLOUD_NODE_LVM_GROUP || nef_fatal "lvcreate failed"
        mkfs.ext4 -m 0 -L $name $_device || nef_fatal "mkfs.ext4 failed"
        fsUUID=$(dumpe2fs -h $_device | grep -i "filesystem uuid" | sed 's/.* //')
        nef_cloud_log "Created FS $fsUUID on $_device. Mouting..."

        mkdir $lxcpath
        echo "UUID=$fsUUID $lxcpath ext4 defaults 0 2" >>/etc/fstab
        mount $lxcpath || nef_fatal "mount failed"
    fi

    # rm -rf $tmpDir
    netBridge=nc${NEF_CLOUD_NUMBER}x-$NEF_CLOUD_NODE_NUMBER
    cat <<EOF >$tmpDir/lxc.template.conf
# Generated by nef-cloud, service "host"
lxc.utsname = $name
lxc.rootfs = /lxc/$name
lxc.network.type = veth
lxc.network.flags = up
lxc.network.link = ${netBridge}
lxc.network.ipv4 = `nef_info_service_ip`/23
lxc.network.veth.pair = ${netBridge}.$NEF_SERVICE_NUMBER
lxc.network.ipv4.gateway = `nef_info_service_ip host`
EOF
    command="lxc-create -n $name -f $tmpDir/lxc.template.conf -t nef-sysconf -- $NEF_CLOUD_SYSCONF $NEF_SERVICE_SYSCONF"
    echo "Executing: $command"
    $command
    # echo
    # read -p "Are you sure? [y/n]" -n 1 -r
    # echo
    # if [[ $REPLY =~ ^[Yy]$ ]]
    # then
    #     $command
    # else
    #     exit 2
    # fi
    if [ $? -ne 0 ]; then
        nef_fatal "failed to create container"
    fi

    servicesPath=$lxcpath/etc/nef.local/services
    mkdir -p $lxcpath/etc/nef.local
    _services="$NEF_CLOUD $NEF_CLOUD_NODE $NEF_SERVICE"
    echo $_services >$servicesPath

    nef_cloud_log "Starting container as daemon..."
    lxc-start -n $name -d
    sleep 2
    nef_cloud_log "Finishing configuration through SSH [`nef_info_service_ip`]..."
    ssh `nef_info_service_ip` "apt-get update && sysconf -y update && nef-cloud update services" || return $?
    nef_cloud_log "Container successfully installed: $name"
}

_nef_service_host_destroy_lxc_rootfs()
{
    lxcpath=$(_nef_service_host_lxc_path)
    if cat /proc/mounts | grep -q $lxcpath; then
        nef_cloud_log "$lxcpath is mounted: unmounting and destroying volume..."
        umount $lxcpath || nef_fatal "umount failed for $lxcpath"
        _device=/dev/$NEF_CLOUD_NODE_LVM_GROUP/$(nef_info_service_hostname)
        lvremove $_device || nef_fatal "lvremoved failed for $_device"

        bakFstab=/etc/fstab.`date +%Y%m%d`.bak
        cp /etc/fstab $bakFstab && \
            cat $bakFstab | grep -v "^UUID=.* $lxcpath " >/etc/fstab \
            || nef_fatal "could not edit /etc/fstab"

    else
        [ -d $lxcpath ] && {
            nef_cloud_log "deleting: $lxcpath"
            rm -rf $lxcpath
        }
        tmpDir=$(nef_create_temp_dir)
    fi
}

_nef_service_host_destroy_containers()
{
    _nef_foreach_lxc _nef_service_host_destroy_containers_one
}
_nef_service_host_destroy_containers_one()
{
    name=$(nef_info_service_hostname)
    if lxc-ls | grep -q $name; then
        nef_cloud_log "destroying container: $name"
        lxc-destroy -f -n $name
        [ -d /lxc/$name ] && rm -rf /lxc/$name
    else
        nef_cloud_log "not destroying unexisting container: $name"
    fi
}
